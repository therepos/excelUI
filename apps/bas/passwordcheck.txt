Private Declare PtrSafe Function CryptAcquireContext Lib "advapi32.dll" Alias "CryptAcquireContextA" ( _
    ByRef hProv As LongPtr, _
    ByVal pszContainer As String, _
    ByVal pszProvider As String, _
    ByVal dwProvType As Long, _
    ByVal dwFlags As Long) As Long

Private Declare PtrSafe Function CryptCreateHash Lib "advapi32.dll" ( _
    ByVal hProv As LongPtr, _
    ByVal Algid As Long, _
    ByVal hKey As LongPtr, _
    ByVal dwFlags As Long, _
    ByRef phHash As LongPtr) As Long

Private Declare PtrSafe Function CryptHashData Lib "advapi32.dll" ( _
    ByVal hHash As LongPtr, _
    ByRef pbData As Byte, _
    ByVal dwDataLen As Long, _
    ByVal dwFlags As Long) As Long

Private Declare PtrSafe Function CryptGetHashParam Lib "advapi32.dll" ( _
    ByVal hHash As LongPtr, _
    ByVal dwParam As Long, _
    ByRef pbData As Byte, _
    ByRef pdwDataLen As Long, _
    ByVal dwFlags As Long) As Long

Private Declare PtrSafe Function CryptDestroyHash Lib "advapi32.dll" ( _
    ByVal hHash As LongPtr) As Long

Private Declare PtrSafe Function CryptReleaseContext Lib "advapi32.dll" ( _
    ByVal hProv As LongPtr, _
    ByVal dwFlags As Long) As Long

Private Const PROV_RSA_FULL As Long = 1
Private Const CRYPT_VERIFYCONTEXT As Long = &HF0000000
Private Const CALG_SHA_256 As Long = &H800C
Private Const HP_HASHVAL As Long = &H2

Function SHA256(text As String) As String
    Dim hProv As LongPtr, hHash As LongPtr
    Dim data() As Byte, hash(31) As Byte
    Dim hashLen As Long, i As Long
    Dim result As String

    data = StrConv(text, vbFromUnicode)
    If CryptAcquireContext(hProv, vbNullString, vbNullString, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) = 0 Then Exit Function
    If CryptCreateHash(hProv, CALG_SHA_256, 0, 0, hHash) = 0 Then GoTo CleanUp

    If CryptHashData(hHash, data(0), UBound(data) + 1, 0) = 0 Then GoTo CleanUp
    hashLen = 32
    If CryptGetHashParam(hHash, HP_HASHVAL, hash(0), hashLen, 0) = 0 Then GoTo CleanUp

    For i = 0 To hashLen - 1
        result = result & LCase(Right("0" & Hex(hash(i)), 2))
    Next i
    SHA256 = result

CleanUp:
    If hHash <> 0 Then CryptDestroyHash hHash
    If hProv <> 0 Then CryptReleaseContext hProv, 0
End Function



# ---


Function IsPasswordValid(inputPwd As String) As Boolean
    Dim inputHash As String
    inputHash = SHA256(inputPwd)
    IsPasswordValid = (inputHash = "PRECOMPUTED_HASH_STRING")
End Function
